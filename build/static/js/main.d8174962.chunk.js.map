{"version":3,"sources":["components/Main.js","components/Update.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","useState","money","from","setFrom","fromVal","setFromVal","to","setTo","toVal","setToVal","num","setNum","results","setResults","isShow","setIsShow","handleXClick","e","value","target","tempPost","filter","element","index","exchangeList","className","map","i","key","onClick","Form","Label","Group","Control","as","id","onChange","forEach","toString","type","length","result","alert","update","rel","href","Update","setType","setValue","setMoney","back","c","counter","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d8174962.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Main(props) {\r\n    const [money,setMoney] = useState(props.money)\r\n    const [from,setFrom]=useState(4);\r\n    const [fromVal, setFromVal]=useState('dollar');\r\n    const [to,setTo]=useState(4);\r\n    const [toVal, setToVal]=useState('dollar');\r\n    const [num,setNum]=useState();\r\n    const [results, setResults]=useState(props.results);\r\n    const [isShow, setIsShow]=useState(false);\r\n\r\n    function handleFromChange(e){\r\n        let value = e.target.value;\r\n        money.forEach(function(i){\r\n            if(i.value.toString() === value){\r\n                setFromVal(i.type);\r\n            }\r\n        })\r\n        setFrom(value);\r\n        \r\n        \r\n    }\r\n    function handleToChange(e){\r\n        let value = e.target.value;\r\n        money.forEach(function(i){\r\n            if(i.value.toString() === value){\r\n                setToVal(i.type);\r\n            }\r\n        })\r\n        setTo(value);\r\n    }\r\n    function handleNumChange(e){\r\n        let value = e.target.value;\r\n\r\n        setNum(value);\r\n    }\r\n    function handleStartClick(){\r\n        if(num.length !== 0){\r\n            let result = (from*num)/to;\r\n            setResults([...results, result])\r\n            alert(result)\r\n        }\r\n    }\r\n    function handleViewClick(){\r\n        setIsShow(!isShow);\r\n    }\r\n    function handleXClick(e){\r\n        let value = e.target.value;\r\n            let tempPost=results.filter((element,index)=>(index!==value));\r\n            setResults([...tempPost])\r\n\r\n    }\r\n    var exchangeList = '';\r\n    if(isShow){\r\n        exchangeList =                 <div className='row'>\r\n        {results.map((element,i)=>{\r\n            return <div key={i} className='row'>\r\n                <div className='col-8'>\r\n                <label>#{i+1}</label><br />\r\n                <p>From {fromVal} To {toVal}</p><br />\r\n                <p>{num}={element}</p>\r\n                </div>\r\n                <div className='col-4'>\r\n                    <button onClick={handleXClick} value={i}>X</button>\r\n                    </div>\r\n                </div>\r\n        })}\r\n    </div>\r\n    }\r\n    function handleUpdateClick(){\r\n        props.update(money,results);\r\n    }\r\n    return (\r\n        <div className=\"container App\">\r\n        <div className='row'>\r\n          <div className='col-4'></div>\r\n          <div className='box col-4'>\r\n          <h1>Exchange</h1>\r\n          <Form className='row'>\r\n          <Form.Label className='col-3'>From: </Form.Label>\r\n                <Form.Group className='col-4'>\r\n                    <Form.Control as=\"select\" id='fromSelect' onChange={handleFromChange}>\r\n                        {money.map((element,i)=>{\r\n                            return <option key={i} value={element.value}>{element.type}</option>\r\n                        })}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group className='col-5'>\r\n                    <Form.Control type=\"number\" onChange={handleNumChange}/>\r\n                </Form.Group>\r\n                <Form.Label className='col-3'>To: </Form.Label>\r\n                <Form.Group className='col-4'>\r\n                    <Form.Control as=\"select\" id='fromSelect' onChange={handleToChange}>\r\n                    {money.map((element,i)=>{\r\n                            return <option key={i} value={element.value}>{element.type}</option>\r\n                        })}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n          </Form>\r\n          <div className='row'>\r\n                    <div className='col-4'></div>\r\n                    <div className='col-4'></div>\r\n                    <div className='col-4'>\r\n                        <button onClick={handleStartClick}>Start</button>\r\n                    </div>\r\n                </div>\r\n                        <br />\r\n                <div className='row'>\r\n                    <div className='col-4'>\r\n                    <Link to='/update'><button className='btns' onClick={handleUpdateClick}>Update</button></Link>\r\n                    </div>\r\n                    <div className='col-4'>\r\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.facebook.com\"><button className='btns'>Share On Facebook</button></a>\r\n                    </div>\r\n                    <div className='col-4'>\r\n                        <button className='btns' onClick={handleViewClick}>View Your Exchange list</button>\r\n                    </div>\r\n                </div>\r\n                        {exchangeList}\r\n          </div>\r\n          <div className='col-4'></div>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Main;","import React,{useState} from 'react';\r\nimport { Form } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Update(props) {\r\n    const [type,setType] = useState();\r\n    const [value,setValue] = useState();\r\n    const [money,setMoney] = useState(props.money);\r\n    const [name,setName] = useState('');\r\n\r\n    function handleTypeChange(e){\r\n        let value=e.target.value;\r\n        setType(value);\r\n    }\r\n    function handleValueChange(e){\r\n        let value=e.target.value;\r\n        setValue(value);\r\n    }\r\n    function handleUpdateClick(){\r\n        let c=0;\r\n        for(let i=0;i<type.length;i++){\r\n            if(type[i]<'A' || type[i]>'z'){\r\n                c++;\r\n            }\r\n        }\r\n        if(c!==0){\r\n            alert('Error')\r\n        } else{\r\n        let counter=0;\r\n        for(let i=0;i<money.length;i++){\r\n          if(money[i].type === type){\r\n             money[i].value = value;\r\n                counter++;\r\n                setMoney(money);\r\n            } \r\n        }\r\n            if(counter===0){\r\n            setMoney([...money,{type:type,value:value}])\r\n            } \r\n        }\r\n    }\r\n    function handleBackClick(){\r\n        props.back(money);\r\n    }\r\n    return (\r\n        <div className='container App'>\r\n            <div className='row'>\r\n                <div className='col-4'></div>\r\n                <div className='col-4 box'>\r\n                    <h1>Update</h1>\r\n                    <div className='row'>\r\n                        <div className='col-6'>Type</div>\r\n                        <div className='col-6'>Value</div>\r\n                    </div>\r\n                        {money.map((element,i)=>{\r\n                            return <div className='row' key={i}>\r\n                            <div className=\"col-6\">\r\n                                {element.type}\r\n                            </div>\r\n                            <div className=\"col-6\">\r\n                                {element.value}\r\n                            </div>\r\n                            </div>\r\n                        })}\r\n                            <br />\r\n                            <Form className='row'>\r\n                            <Form.Label className='col-6'>Type: </Form.Label>\r\n                            <Form.Group className='col-6'>\r\n                                <Form.Control type=\"text\" onChange={handleTypeChange} />\r\n                            </Form.Group>\r\n                            </Form>\r\n                            <Form className='row'>\r\n                            <Form.Label className='col-6'>New Value: </Form.Label>\r\n                            <Form.Group className='col-6'>\r\n                                <Form.Control type=\"number\" value={value} onChange={handleValueChange}/>\r\n                            </Form.Group>\r\n                            </Form>\r\n                            <div className='row'>\r\n                                <div className='col-6'><Link to='/'><button onClick={handleBackClick}>Back</button></Link></div>\r\n                                <div className='col-6'><button onClick={handleUpdateClick}>Update</button></div>\r\n                            </div>\r\n                </div>\r\n                <div className='col-4'></div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Update;","import React,{useState} from 'react';\nimport Main from './components/Main';\nimport Update from './components/Update';\nimport {HashRouter as Router , Route , Switch} from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  const [money,setMoney] = useState([{type:'dollar',value: 4},{type:'euro',value: 5},{type:'shekel',value: 1}]);\n  const [results,setResults] = useState([]);\n  function update(money,results){\n    setMoney(money);\n    setResults(results);\n  }\n\n  function back(money){\n    setMoney(money);\n  }\n\n  return (\n    <div>\n      <Router>\n         <Switch>\n            <Route exact path=\"/\" render={() => (<Main update={update} money={money} results={results}/>)}/>\n            <Route exact path=\"/update\" render={() => (<Update money={money} back={back}/>)}/>\n          </Switch> \n            </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}